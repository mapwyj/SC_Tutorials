{\rtf1\ansi\ansicpg1252\cocoartf949
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green0\blue191;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 // 100324 Technikes Synthesis Ichou\cf3 \
\
\cf2 // Given are: \cf3 \
~nsamples = 1000;\
~samplingRate = 44100;\
~freq = 400;\
~series = (0..~nsamples);\
\
(~series / 10).sin.postln.plot;\
\
\cf2 // 2 ways to obtain the series that we subject to the sin function: \cf3 \
\
(0..~nsamples) * ~factor;	\cf2 // way 1. \cf3 \
\
(0, ~increment..???);	\cf2 // way 2. \cf3 \
\
Example: \
~series = \cf4 nil\cf3 ;\
~nsamples = 1000;\
~increment = 2pi / 100;\
~seriesEnd = (~nsamples - 1) * ~increment;\
~series = (0,~increment..~seriesEnd);\
~series.size;\
\
\cf2 // Now let's find the value of ~increment so that sin(~series) produces a \cf3 \
\cf2 // sample whose frequency is ~freq; \cf3 \
\
\
\
~t = 0;\
~series = [];\
~increment = 0.01;\
~nsamples do: \{\
	~series = ~series add: ~t;	\
	~t = ~t + ~increment;\
\};\
~series;\
                                                                                                                                                                                                                                                                                                                                                                                                                        \
\cf2 //  sin(t);\cf3 \
\
\cf2 // Goal: Calculate the value of ~xfactor so that: \cf3 \
\cf2 // When calculating the following: \cf3 \
		sin(~series * ~xfactor);\
\cf2 // The resulting waveform has a fequency of ~freq. \cf3 \
\
\
\cf2 // Answer: \cf3 \
\
~xfactor = (2pi * ~freq) / ~samplingRate;\
\cf2 // Example:  \cf3 \
~nsamples = 100000;\
~samplingRate = 44100;\
~freq = 600;\
~series = (0..~nsamples);\
~series.size.postln;\
~xfactor = (2pi * ~freq) / ~samplingRate;\
~samples = sin(~series * ~xfactor);\
\
~signal = \cf4 Signal\cf3 .new.addAll(~samples);\
~signal.plot;\
\
\
\
\
\
\

\fs42 \{ \
	10 do: \{ \cf4 | i |\cf3 \
		(~signal + ((i - 5) / 3) ).play;\
		2.5.wait;\
	\}\
\}.fork;\

\fs18 \
\

\fs42 \{ \
	10 do: \{ \cf4 | i |\cf3 \
		(~signal *  ((i + 1) * 0.1)).play;\
		2.5.wait;\
	\}\
\}.fork;\

\fs18 \
\
\cf2 // \cf3 \

\fs32 \
\cf2 // Multiplying a sample with another sample. \cf3 \
~nsamples = 100000;\
~samplingRate = 44100;\
~freq = 600;\
~series = (0..~nsamples);\
~series.size.postln;\
~xfactor = (2pi * ~freq) / ~samplingRate;\
~samples = sin(~series * ~xfactor);\
~samples2 = ~series / ~nsamples;\
~samples2.plot;\
~finalSamples = ~samples * ~samples2;\
~signal = \cf4 Signal\cf3 .new.addAll(~finalSamples);\
~signal.plot;\
~signal.play;\
\cf2 \
// backward \cf3 \
~signal = \cf4 Signal\cf3 .new.addAll(~finalSamples.reverse);\
~signal.plot;\
~signal.play;\
\
\cf2 // add instead of multiply! \cf3 \
\cf0 ~finalSamples = ~samples + ~samples2;\
~signal = \cf5 Signal\cf0 .new.addAll(~finalSamples);\
~signal.plot;\
~signal.play;\
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf6 // make your own variations. \cf0 \
~finalSamples = ~samples * (~series * ((2pi * 10) / ~samplingRate)).sin;\
~signal = \cf5 Signal\cf0 .new.addAll(~finalSamples);\
~signal.plot;\
~signal.play;\
\
~finalSamples = ~samples * (~series * ((2pi * 100) / ~samplingRate)).sin;\
~signal = \cf5 Signal\cf0 .new.addAll(~finalSamples);\
// ~signal.plot;\
~signal.play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs18 \cf3 \
\

\fs32 \cf0 ~finalSamples = ~samples * (~series + ((2pi * (~series / (~series.size * 400))) / ~samplingRate)).sin;\
~signal = \cf5 Signal\cf0 .new.addAll(~finalSamples);\
~signal.plot;\
~signal.play;\

\fs18 \cf3 \
\
\
0..0\
\
\cf4 Server\cf3 .default.scope;}