{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf110
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red193\green39\blue16;\red13\green30\blue192;\red51\green116\blue18;
\red96\green96\blue96;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs24 \cf0 \
\cf2 // AVARTS 2009 - Computer Music Course\
// Programming in Supercollider. A series of step by step tutorials in Supercollider\
// by IZSK. \
\cf0 \
\cf2 /* Tutorials are based on Supercollider Help files and on the book "Programming in Supecollider by IZ. Aim is to convey programming skills without presupposing any previous knowledge of programming languages and compiler technology. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 //INTRODUCTION\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 1. To Begin\
\cf0 \
\cf2 /* Open SC. An untitled document with text such as\
\
init_OSC\
compiling class library..\
	NumPrimitives = 548\
	compiling dir: '/Applications/SuperCollider3/SCClassLibrary'\
	pass 1 done\
	Method Table Size 3091264 bytes\
	Number of Method Selectors 2880\
	Number of Classes 1744\
	Number of Symbols 6926\
	Byte Code Size 129989\
	compiled 299 files in 1.61 seconds \
compile done\
prGetHostByName hostname 127.0.0.1 addr 2130706433\
RESULT = 256\
Class tree inited in 0.09 seconds\
\
appears in the top left of the screen. The document functions as a "Post Window," so-called because SuperCollider uses it to "post" notifications. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 2. Two More Windows\
\cf0 \
\cf2 /* On the bottom of the screen are two more windows. One is called "localhost server" and the other is "internal server." Click on the "boot" button on the localhost server. The words "localhost" in the black box of the button turn red and the word "Boot" on the button changes to "Quit." More text, such as\
\
booting 57110\
SC_AudioDriver: numSamples=512, sampleRate=44100.000000\
start   UseSeparateIO?: 0\
PublishPortToRendezvous 0 57110\
SuperCollider 3 server ready..\
notification is on\
\
will print to the post window. The localhost server is now ready to be used. Activate the internal server, if you wish, in the same way. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 3. Workspace Windows\
\cf0 \
\cf2 /* Open existing SC documents with File->Open... or cmd-o. Use File->New or cmd-n to create new documents.\
\
SuperCollider documents generally have .sc appended to their file names; however, SuperCollider can  read and write documents in Rich Text Format (.rtf) and several other formats, as well.*/\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 4. Evaluating code\
\cf0 \
\cf2 // To run (evaluate) one line of code, such as\
\cf0 \
\{ \cf3 SinOsc\cf0 .ar([400, 401], 0, 0.1) * \cf3 Saw\cf0 .ar([11, 33], 1) * \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .sine(10)) \}.play\
\
\cf2 /* first make sure that the localhost server is booted. Then put the cursor anywhere on the line (shown above) and press <enter>. If you don't have an enter key, then you can use ctrl-Return, Ctrl-c, fn-Return( on Some Macs), or Shift-Return. The server will synthesize audio and text that looks something like\
\
Synth("-613784702" : 1000)\
\
will appear in the post window.\
\
Press command-period (cmd-.) to stop synthesis.*/\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 /* To run more than one line of code, select all the lines and press <enter>.\
\
To help with the selection process, examples with more than one line often are placed in enclosing parentheses. In such cases, select the text by clicking immediately to the right of the top parenthesis or to the left of the bottom parenthesis. Or, with the cursor to the right of the top parenthesis or the left of the bottom one, press cmd-shift-b.\
\
Then press enter (to run the example). */\
\cf0 \
(\
\{\
	\cf3 RLPF\cf0 .ar(\
		in: \cf3 Saw\cf0 .ar([100, 102], 0.15),\
		freq: \cf3 Lag\cf0 .kr(\cf3 LFNoise0\cf0 .kr(4, 700, 1100), 0.1),\
		rq: 0.05\
	)\
\}.play\
)\
\
\cf2 /* The server will synthesize audio and text that looks something like\
\
Synth("-393573063" : 1000)\
\
will appear in the post window.\
\
Press command-period (cmd-.) to stop synthesis. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 5. Recording sound\
\cf0 \
\cf2 /* The localhost and the internal server windows have buttons, on the far right, to activate recording. To record, choose the a default server. The button on the default server of your choice intially will say "prepare rec." Press it once and it will say record >. Press it again to start recording. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 //SYNTAX ELEMENTS OF THE SUPERCOLLIDER LANGUAGE\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\
\cf2 // 6. Comments\
\cf0 \
\cf2 /* Comments are descriptive remarks that are meant to be read by humans but ignored by computers. Programmers use comments to annotate how code works or what it does. It's also the case that some find it helpful to write programs by first notating comments and then filling in matching code.\
\
Multiline comments are enclosed between /* and */\
Single line comments start at // and run to the end of the line\
\
If (when) evaluated, a comment will return nil, which is the value SuperCollider uses for unitialized data.\
\
////////////////////////////////////////////////////////////////////////////////////////////////////\
 \
Use Format->Syntax Colorize (or cmd-') to syntax-colorize comments. */\
\cf0  \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
	\
\cf2 // 7. Literals.\
\cf0 \
\cf2 /* Literals are values which have a direct syntactic representation. \
The following sections describe the types of literals that can be represented. */\
\cf0 \
\cf2 // 7.1 Numbers.\
\cf0 \
		\cf2 /* Integers\
		\
		An integer is any series of digits optionally preceeded by a minus sign.\
		examples of integers : */\
\cf0 	\
								-13      \
								666      \
								2112      \
								96\
		\cf2 /* Floats\
\
		A float is one or more decimal digits followed by a decimal point followed by one or more decimal digits. \
		You must have digits on both sides of the decimal point. \
		\
		This distinguishes floating point numbers from integer expressions like: */\
\cf0 \
								8.rand\
 \
		\cf2 // examples of floats :\
\cf0 		\
								0.39      \
								98.6      \
								1.0      \
								-0.5     \
								\
		\cf2 // Exponential notation is also supported.\
\cf0 \
								1.2e4\
								1e-4\
								\
		\cf2 // The constant pi can be appended to a number to create floating point constant:\
\cf0 \
								2pi    \
								0.5pi\
								-0.25pi\
								\
		\cf2 /* Numbers can also be written in radices other than base 10 up to base 36. \
		The radix is specified in base 10 followed by the letter 'r' followed by the value written in\
		that radix using characters 0-9,A-Z, or a-z, for digit values from 0 to 35. \
		For example you can write hexidecimal numbers as follows: */\
\cf0 \
								16r\cf3 F0\cf0 \
								16r\cf3 A9FF\cf0 \
\
		\cf2 // Binary numbers can be written as follows:\
\cf0 \
								2r01101011\
\
		\cf2 // Floating point values may also be specified in any base:\
\cf0 \
								12r4A.\cf3 A\cf0 \
								\
		\cf2 // Characters\
\cf0 \
		\cf2 // Characters are preceeded by a dollar sign:\
\cf0 		\
								$A     \
								$B     \
								$C       \
\
		\cf2 // Tab, linefeed, carriage return, and backslash are preceeded by a backslash:\
\cf0 		\
								$\\t\
								$\\n\
								$\\r\
								$\\\\\
		\cf2 // Symbols \
\cf0 \
		\cf2 // A symbol is written as a string enclosed in single quotes. \
\cf0 		examples of symbols:\
\
								\cf4 'x'\cf0 \
								\cf4 'aiff'\cf0 \
								\cf4 'BigSwiftyAndAssoc'\
\cf0 								\cf4 'nowhere here'\cf0   \cf4 \
\cf0 								\cf4 'somewhere there'\cf0  \cf4 \
\cf0 								\cf4 '.+o*o+.'\
\cf0 	\
		\cf2 // A symbol consisting of a single word can be written with a preceeding backslash.\
\cf0 \
								\cf4 \\x\cf0 \
								\cf4 \\aiff\cf0 \
								\cf4 \\BigSwiftyAndAssoc\
\cf0 								\
		\cf2 // Strings\
\cf0 \
		\cf2 // Strings are written in double quotes:\
\cf0 \
								\cf5 "This is a string."\
\cf0 	\
		\cf2 /* If two or more strings are lexically adjacent, then they combine into a larger string. \
		example: */\
\cf0 \
								\cf5 "This"\cf0  \cf5 " is "\cf0  \cf5 "also a "\cf0  \cf5 "string."\
\cf0 \
		\cf2 /* Strings may span more than one line. If so, then the new line characters become part of the string.\
		example: */\
\cf0 \
								\cf5 "This \cf0 \
\cf5 								is \
								also a\
								string.\
								"\
\cf0 		\cf2 // Identifiers \
\cf0 \
		\cf2 /* Names of methods and variables begin with a lower case alphabetic character, followed  by zero or more \
		alphanumeric characters.*/\
\cf0 \
								\cf3 var\cf0  abc, z123, func;\
								\
		\cf2 // Class Names\
\cf0 \
		\cf2 // Class names always begin with a capital letter followed  by zero or more  alphanumeric characters.\
\cf0 \
								\cf3 Object\cf0 \
								\cf3 Point\cf0 \
								\cf3 Synth\cf0 \
								\
		\cf2 // To access help, mark the class name and type cmd+d\
\cf0 		\
		\cf2 // Special Values\
\cf0 \
		\cf2 /* The singular instances of the classes True, False and Nil are written as the \
		words true, false, nil and inf. */\
\cf0 \
								x = \cf3 true\cf0 ;\
								y = \cf3 false\cf0 ;\
								z = \cf3 nil\cf0 ;\
								q = \cf3 inf\cf0 ;\
								\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 8. Primitives\
\cf0 \
\cf2 /* Primitives are identifiers that start with underscore _. They call code that is compiled in C++ and performs elementary operations of the language, which cannot be coded in SuperCollider. */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 9. Grouping Elements\
\cf0   \
  \cf2 // Parentheses ( ) are used to: \
\cf0   \
  					\cf2 // group expressions in order to specify order of execution:\
\cf0   					\
  									1 + (2 * 3) \
  									 \
  					\cf2 // enclose arguments that are accompanying messages: \
\cf0   									\
  									2.pow(3) \
  									\
  					\cf2 // create numerical arrays from "Matlab type" series notation: \
\cf0   					\
  									(1..5) \
  									\
 					\cf2 // create Events from keyword-value pairs: \
\cf0  							\
 									(freq: 440, amp: 0.1)\
  \
  \cf2 // Brackets [] are used to:\
\cf0   \
  \
  					\cf2 // create Arrays or other types of collections\
\cf0   		\
  									[1, 2, 5]\
   \
  					\cf2 // index into collections for reading or writing of values: \
\cf0   					\
  									aDictionary[\cf4 \\freq\cf0 ]\
  									anArray[0]\
  									\
\
\cf2 // Braces \{\} are used to:\
\cf0 \
					\cf2 // Define functions: \
\cf0 					\
									\{ \cf3 arg\cf0  a, b; a + b \} 	\
									\
					\cf2 // Define Classes: \
\cf0 					\
									\cf3 Nil\cf0  \{ \cf2 /* class definition code */\cf0  \} \cf2 \
\cf0 									\
					\cf2 // Define methods: \
\cf0 					\
									isNil \{ ^\cf3 true\cf0  \}\
									\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 10. Binary Operators\
\cf0 \
	\cf2 // Delimiters\
\cf0 			\
			\cf2 //The dot . is used in the following senses: \
\cf0 			\
			\
					\cf2 // To attach a message to the receiving object that it is sent to: \
\cf0 											\
									123.squared \
									\
					\cf2 // To separate the decimal part of a floating point number from the integer part:\
\cf0 									\
									12.3\
\
					\cf2 // To append an adverb to a binary operator. (Adverbs are identifiers or Integers that modify 					the behavior of an operator).\
\cf0 					\
					\cf2 // Triple dots ... are used as ellipsis to collect multiple arguments into an array, in 						argument definitions: \
\cf0 					\
									\{ \cf3 | ... args |\cf0   \cf2 // or in multiple variable assignments:\
\cf0 									#a, b ... rest = [1, pi, 10, \cf3 true\cf0 , \cf3 inf\cf0 ];\
									 \
					\cf2 // Double dots are used in notation of arithmetic series: \
\cf0 					\
									(1..5)\
									(0, 0.1 .. 10)	\
																	\
	\cf2 // Comma is used to separate arguments:\
\cf0 				   \
				  					f.value(pi, 400)\
				   \
				  \cf2 // elements of Collections:\
\cf0 				   \
				    				[pi, \cf4 \\a\cf0 , 5]\
				     \
				  \cf2 // or variables or arguments in declaration statements: \
\cf0 				   \
				    				\{ \cf3 arg\cf0  a, b; \
				   				\
				  \cf2 // or in multiple assignment statements: \
\cf0 				   \
				    				#freq, amp = #[440, 0.1]\
				   				\
	\cf2 // Semicolon is used to separate statements. The last statement of a program (function) does not need to end in 	a semicolon.\
\cf0 									a.postln; \
									b = a.squared\
									\
	\cf2 // Pipe signs | | are used to delimit an argument declaration statement: \
\cf0 	\
									\{ \cf3 | a, b |\cf0  a + b \} \cf2 // This is alternative notation to: \
\cf0 									\cf3 arg\cf0  a, b;\
									\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 11. Special Characters\
\cf0 \
\
		\cf2 // ^ marks the statement that it precedes as a return value statement in a method\
\cf0 		\
		\cf2 // * Has two uses:\
\cf0 		\
					\cf2 /* Preceding an argument in a message, it applies the collection's elements as separate 							arguments. */\
\cf0 					\
					\
					\cf2 /* Preceding the name of a method in Class definition code, it indicates that this is a class 					method. */\
\cf0 					\
		\cf2 // # (octothorp) is used as prefix in two cases: 	\
\cf0 		\
					\cf2 // Multiple variable assignment: \
\cf0 									\
									#freq, amp = [400, 0.1]\
					\
					\cf2 // Construction of immutable Arrays and closed Functions.\
\cf0 					\
									#[1, 5, 11]\
									#\{ pi ! 3 \}\
									\
		\cf2 // $ precedes Character instances: \
\cf0 		\
									$a\
									$. \
									$A\
		\
		\
		\cf2 /*  ~ Tilde before an identifier treats it as an environment variable (see section Environ-\
		ment Variables) -	< and > construct accessor methods for variables in classes */\
\cf0 \
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\cf2 // 12. Construction of Specific Kinds of Objects, Abbreviations, Various Conventions\
\cf0 \
\
		\cf2 // \\ before an identifier constructs a Symbol \
\cf0 		\
									\cf4 \\symbolic\cf0 \
									\
		\cf2 // Single quotes enclosing text construct a Symbol \
\cf0 		\
									\cf4 'symbol from any string !'\
\cf0 \
		\cf2 // Double quotes enclosing text construct a String \
\cf0 		\
									\cf5 "a string"\
\cf0 									\
		\cf2 // Braces \{\} construct Functions\
\cf0 \
		\
		\cf2 // Brackets [] construct Arrays (or other Collections when preceded by collection name)\
\cf0 		\
		\
		\cf2 // Parentheses () enclosing keyword-value pairs construct events: \
\cf0 									\
									(a: 1, b: 2)\
									\
		\cf2 // At-sign @ between two numbers constructs a Point: \
\cf0 		\
									-5@10\
									\
		\cf2 // At-sign @ between a collection and a number indexes the number into the collection:\
\cf0 									\
									[1, 5, 7]@1\
									\
		\cf2 // Arrow -> between values constructs an association: \
\cf0 		\
									\cf4 \\freq\cf0 ->440\
		\
		\cf2 // Underscore _ by itself in a message statement constructs a function: \
\cf0 		\
									\cf3 _\cf0 .isPrime\
									\
		\cf2 // element ! n repeats the element n times and collects the result:\
\cf0 		\
									\cf3 _\cf0 .isPrime ! 12\
									\
		\cf2 /* The message new can be omitted between a Class name and arguments enclosed in parentheses: \
		Synth("sine") is equivalent to Synth.new("sine") */\
\cf0 		\
		\cf2 /* The message value can be omitted between a Function and arguments enclosed in\
		parentheses: foo.(n) is equivalent to foo.value(n) */\
\cf0 		\
		\cf2 // Functions as sole arguments need not be enclosed in parentheses: \
\cf0 		\
									10.do \{ \cf5 "hello"\cf0 .postln \}\
									\
		\cf2 /* Messages whose name ends in underscore _ can also be written in "variable assig- ment" format: \
		aPoint.x_(0) is equivalent to: aPoint.x = 0 */\
\cf0 		\
		\cf2 /* < or > prepended to a variable name in a variable declaration statement in a Class construct 				corresponding methods for getting or setting the value of that variable. */\
\cf0 \
\
\cf2 ////////////////////////////////////////////////////////////////////////////////////////////////////\
\cf0 \
\
\
\
\
\
\
\
\
}