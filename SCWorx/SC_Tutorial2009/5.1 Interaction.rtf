{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Geneva;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green112\blue0;
\red96\green96\blue96;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs50 \cf0 Interaction via Mouse, Keyboard, MIDI, SoundIn...\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Let's return to the localhost Server now:\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Server\cf0 .default=s=\cf3 Server\cf0 .local;\
s.boot;\
)\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \ul \ulc2 MouseX/Y\ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Using the mouse as a controller is a quick and easy way of interacting with a patch\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 MouseX\cf0 .kr(leftval, rightval, warp)	\cf2 //warp can be 'linear' or 'exponential' depending \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 											\cf2 //on the way the parameter varies\
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 MouseY\cf0 .kr(topscreenval, bottomscreenval, warp)	\
\
Compare these hearing tests (be careful, they're piercing)\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 MouseX\cf0 .kr(20,20000, \cf4 'linear'\cf0 ),0,0.1)\}.play\
\
and\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\{\cf3 SinOsc\cf0 .ar(\cf3 MouseY\cf0 .kr(20,20000, \cf4 'exponential'\cf0 ),0,0.1)\}.play\
\
The exponential mapping is far more comforting as a proportion of screen space than the linear one!\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
If you'd like to restrict a controller to a discrete range, you can use the Index UGen\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Index\cf0 .kr(array, indexing signal)	\cf2 //the indexing signal is clipped to keep it in range\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 									\cf2 //array must be a FloatArray, so you can build it as [0,1,2].asSignal\
\
//there are three distinct states\
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  vals, buf, s;\
\
s=\cf3 Server\cf0 .local;\
\
vals= [100,200,300];\
buf=\cf3 Buffer\cf0 (s, vals.size, 1); \cf2 //Buffers will be investigated properly in a later tutorial\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 // alloc and set the values\cf0 \
s.listSendMsg( buf.allocMsg( buf.setnMsg(0, vals) ));\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 Index\cf0 .ar(buf.bufnum, \cf3 MouseX\cf0 .kr(0, vals.size+1)),0,0.2)\}.play\
)															\cf2 //left, middle and right of the screen \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  vals, buf, s;\
\cf3 var\cf0  numharm,basefreq;\
\
numharm=11; 	\cf2 //number of harmonics\cf0 \
basefreq=66;	\cf2 //base frequency of series\cf0 \
\
s=\cf3 Server\cf0 .local;\
\
vals= basefreq*(\cf3 Array\cf0 .series(numharm,1,1));\
buf=\cf3 Buffer\cf0 (s, vals.size, 1);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 // alloc and set the values\cf0 \
s.listSendMsg( buf.allocMsg( buf.setnMsg(0, vals) ));\
\
\{\cf3 SinOsc\cf0 .ar(\cf3 Index\cf0 .kr(buf.bufnum,\cf3 MouseX\cf0 .kr(0,numharm)),0,0.1)\}.play\
\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 The Mouse might also be used as a trigger\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  trig,mx;\
mx=\cf3 MouseX\cf0 .kr(0.0,1.0);\
trig= mx>0.5;			\cf2 //this is a UGen which compares mx to the constant signal 0.5 at krate\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SinOsc\cf0 .ar(440,0,0.1*trig)\
\}.play;\
)\
\
(	\cf2 //trigger in a given region\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  trig,mx,my;\
mx=\cf3 MouseX\cf0 .kr(0.0,1.0);\
my=\cf3 MouseY\cf0 .kr(0.0,1.0);\
trig= if((mx>0.3) * (mx<0.5) * (my>0.3) * (my<0.7),1,0); \cf2 //if is a UGen here, * is equivalent to logical AND\
\cf3 SinOsc\cf0 .ar(440,0,0.1*trig)\
\}.play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 To show a more involved example of the principle, here's one of my favourite \
SuperCollider example patches (by James McCartney):\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
    \cf2 // strummable guitar\
\cf0     \cf2 // use mouse to strum strings\
\cf0 \{\
	\cf3 var\cf0  pitch, mousex, out;\cf2 \
\cf0 	pitch = [ 52, 57, 62, 67, 71, 76 ];		\cf2 // e a d g b e\cf0 \
	mousex = \cf3 MouseX\cf0 .kr;\
	out = \cf3 Mix\cf0 .fill(pitch.size, \{ \cf3 arg\cf0  i;\
		\cf3 var\cf0  trigger, pluck, period, string;\
		\cf2 // place trigger points from 0.25 to 0.75\
\cf0 		trigger = \cf3 HPZ1\cf0 .kr(mousex > (0.25 + (i * 0.1))).abs;\
		pluck = \cf3 PinkNoise\cf0 .ar(\cf3 Decay\cf0 .kr(trigger, 0.05));\
		period = pitch.at(i).midicps.reciprocal;\
		string = \cf3 CombL\cf0 .ar(pluck, period, period, 4);\
		\cf3 Pan2\cf0 .ar(string, i * 0.2 - 0.5);\
	\});\
	\cf3 LPF\cf0 .ar(out, 12000);\
	\cf3 LeakDC\cf0 .ar(out);\
\}.play;\
)\cf2 \
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \ul \
\
\
\
\
\
\
Keyboard\
\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 You can use the keyboard to trigger things by setting action functions. This is usually done with GUIs,  but here is an example of  a callbacks from the Document as you type:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1 \cf0 \
(\
\cf3 var\cf0  doc;\
\
\cf3 SynthDef\cf0 (\cf5 "typeofsound"\cf0 ,\{\cf3 Out\cf0 .ar(0,\cf3 Line\cf0 .kr(1,0,0.1,doneAction:2)*\cf3 VarSaw\cf0 .ar(\cf3 Rand\cf0 (100,1000),0,\cf3 Rand\cf0 (0.1,0.8),0.1))\}).send(s);\
\
doc = \cf3 Document\cf0 .current; \cf2 //this text window you're reading from! \cf0 \
doc.keyDownAction_(\{\cf3 arg\cf0  ...args;\
	[args[1],args[3]].postln;\
	\cf3 Synth\cf0 (\cf5 "typeofsound"\cf0 );\
\});\
)\
\
\cf2 //turn this off\cf0 \
(\
\cf3 Document\cf0 .current.keyDownAction_(\cf3 nil\cf0 );\
)
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 [\cf3 Document\cf0 ] \cf2 //the Document help file has other examples of this\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\ul MIDI\ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 To access your MIDI interface you must initialise:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 MIDIClient\cf0 .init\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 For obtaining incoming MIDI messages see the MIDIIn help file\
\
[\cf3 MIDIIn\cf0 ]\
\
The user sets up callback functions for particular MIDI messages.\
\
for sending MIDI messages out see the MIDIOut help file\
\
[\cf3 MIDIOut\cf0 ]\
\
There are also some helper classes:\
\
[\cf6 MIDIResponder\cf0 ]\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SoundIn\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 To obtain an audio input stream, use the simple SoundIn UGen\
\
\{ \cf3 SoundIn\cf0 .ar([0,1],0.1) \}.play;	      \cf2 // stereo through patching from 2 inputs to output\
\
\cf0 \{ \cf3 SoundIn\cf0 .ar(1,0.1) \}.play;	      \cf2 // mono on input channel 1; won't work if you don't have at least 2 inputs!\
\
\
\cf0 So it's easy to build effects processors for live audio:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{ \cf2 //ring modulator\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SinOsc\cf0 .ar(\cf3 MouseX\cf0 .kr(0.001,110,\cf4 'exponential'\cf0  ))*\cf3 SoundIn\cf0 .ar(0,0.5) \
\}.play;	      \cf2 // stereo through patching from input to output\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 )\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf0 SuperCollider comes with an amplitude tracker and pitch tracker for realtime audio \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // use input amplitude to control Pulse amplitude - use headphones to prevent feedback.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \{\
	\cf3 Pulse\cf0 .ar(90, 0.3, \cf3 Amplitude\cf0 .kr(\cf3 SoundIn\cf0 .ar(0)))\
\}.play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 You can threshold the input to avoid picking up background noise\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  input,inputAmp,threshhold,gate;\
\cf3 var\cf0  basefreq;\
\
input = \cf3 SoundIn\cf0 .ar(0,0.1); \
inputAmp = \cf3 Amplitude\cf0 .kr(input);\
threshhold = 0.02;	\cf2 // noise gating threshold\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 gate = \cf3 Lag\cf0 .kr(inputAmp > threshhold, 0.01);\
(input * gate)		\
\}.play;\
)\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf0 The Pitch follower has many input arguments, though you usually take the defaults\
without worrying. It returns two outputs- the tracked frequency and a signal indicating\
whether it has locked onto any periodicity or not\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Server\cf0 .internal.boot; \cf2 //if on a Mac you'll need to swap back to internal server for using .scope- you can have both the internal and localhost server on at once, but you might need to press the -> default button\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
//showing the outputs - K2A makes sure control rate signals are converted to audio rate, because the final output of a Synth has to be audio rate\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  freq, hasFreq;\
# freq, hasFreq = \cf3 Pitch\cf0 .kr(\cf3 SoundIn\cf0 .ar(1,0.1));\
[\cf3 K2A\cf0 .ar(freq*0.001), \cf3 K2A\cf0 .ar(hasFreq)]\
\}.scope\
)\
\
\
(\
\{\
	\cf3 var\cf0  in, amp, freq, hasFreq, out;\
	in = \cf3 Mix\cf0 .ar(\cf3 SoundIn\cf0 .ar([0,1]));\
	amp = \cf3 Amplitude\cf0 .kr(in, mul: 0.4);\
	# freq, hasFreq = \cf3 Pitch\cf0 .kr(in);\
	out = \cf3 Mix\cf0 .ar( \cf3 LFTri\cf0 .ar(freq * [0.5, 1, 2]) ) * amp;\
	6.do(\{ \
		out = \cf3 AllpassN\cf0 .ar(out, 0.040, [0.040.rand,0.040.rand], 2) \
	\});\
	out\
\}.play\
)\cf2 \
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\{\
	\cf3 var\cf0  in, amp, freq, hasFreq, out;\
	\
	in = \cf3 SoundIn\cf0 .ar(1);\
	amp = \cf3 Amplitude\cf0 .kr(in, mul: 0.4);\
	# freq, hasFreq = \cf3 Pitch\cf0 .kr(in);\
	\
	out=if(hasFreq,\cf3 Pulse\cf0 .ar(freq,0.5,0.1),\cf3 SinOsc\cf0 .ar(freq,0,0.1));\
	\
	6.do(\{ \
		out = \cf3 AllpassN\cf0 .ar(out, 0.040, [0.040.rand,0.040.rand], 2) \
	\});\
	out	\
\}.play\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\
\
\
\
\
\
\
\cf7 There are various machine listening capabilities. \
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 Here are some onset detectors which might be helpful: \
\
[\cf6 Onsets\cf0 ]\
[\cf3 PV_HainsworthFoote\cf0 ]\
[\cf3 PV_JensenAndersen\cf0 ]\
\
example triggering TGrains UGen:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
s.sendMsg(\cf8 \\b_allocRead\cf0 , 10, \cf5 "sounds/a11wlk01.wav"\cf0 );\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  fftbuf;\
\
fftbuf=\cf3 Buffer\cf0 .alloc(s,2048,1);\
\
\{\
\cf3 var\cf0  b = 10, source1, detect;\
	\
	source1= \cf3 SoundIn\cf0 .ar(0); \
	\
	detect= \cf3 PV_HainsworthFoote\cf0 .ar(\cf3 FFT\cf0 (fftbuf.bufnum,source1), 1.0, 0.0, 0.7, 0.01);\
	\
	\cf3 TGrains\cf0 .ar(2, detect, b, \cf3 LFNoise0\cf0 .kr(10,0.2,1.0), \cf3 MouseX\cf0 .kr(0,\cf3 BufDur\cf0 .kr(b)), \cf3 MouseY\cf0 .kr(0.1,0.5), \cf3 LFNoise0\cf0 .kr(10,1.0), 0.5, 2);\
\}.play\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\ul RecordBuf\cf0 \ulnone \
\
If you'd like to capture live sound, the RecordBuf UGen is your friend.\
You need to set up a buffer to store the recorded sample data.\
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  b;\
\
b=\cf3 Buffer\cf0 .alloc(s,44100,1);	\cf2 //1 second mono buffer allocated on local server\cf0 \
\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //continuously record in a loop, recording to the buffer we just declared\cf0 \
\cf2 //each record cycle multiplies the old data \cf0 \
	\cf3 RecordBuf\cf0 .ar(\cf3 SoundIn\cf0 .ar(0), b.bufnum, 0, 1.0, \cf3 MouseX\cf0 .kr(0.0,1.0), 1, 1, 1);\
	\
\cf2 //playback the captured buffer in a loop, backwards\cf0 \
	\cf3 PlayBuf\cf0 .ar(1, b.bufnum,\cf3 MouseY\cf0 .kr(0.0,-1.0), 1,0,1);\
\}.play;\
)\
\
You might sync captured buffers to tempo for dance music, and add refinements like user interface to choose when to rerecord the buffer...\
\cf2 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 There are also facilities for control from graphics tablets and joysticks, though these will make more sense after some of the next chapters on GUIs and OSC responders. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\cf7 [
\f2 \cf6 \ul SC2DTabletSlider
\f0 \cf7 \ulnone ]\
[
\f2 \cf6 \ul HIDDeviceService
\f0 \cf7 \ulnone ]\
[{\field{\*\fldinst{HYPERLINK "SC://GeneralHID"}}{\fldrslt \cf6 GeneralHID}}]\cf0 \
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 You might also like to try\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 \
[\cf6 \ul MouseButton\cf7 \ulnone ]\
[\cf6 \ul KeyState\cf7 \ulnone ]\
[{\field{\*\fldinst{HYPERLINK "SC://SerialPort"}}{\fldrslt \cf6 SerialPort}}]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Another standard way is to communicate with other applications using Open Sound Control, a network music protocol; we'll cover this in a later week in this course. \cf2 \
\
\
\
\
}