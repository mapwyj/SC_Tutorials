{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green0\blue0;
\red191\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs48 \cf0 \

\fs78 Analogue Modelling Tips and Tricks\

\fs48 \
\
Contents:\
\
Analogue Warmth: avoiding aliasing, chorusing, lag\
Filter Comparison: standard filters, BEQ Suite, MoogFF\
Server Side Sequencing: triggers, Demand rate UGens\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Simulating Analogue Warmth\
\
\
Digital systems have the drawback of setting hard contraints on representable frequencies and amplitude levels \
\
Avoiding aliasing; use band limited waveforms (i.e. Saw not LFSaw for higher frequencies)\
\
(\
\{\
[\cf2 LFSaw\cf0 .ar(1000),\cf2 Saw\cf0 .ar(1000)]\
\}.plot(0.01)\
)\
\
But then, both are perfectly serviceable for low frequencies and the rougher edge to LFSaw can be useful.\
\
\
\
\
\
\
\
\
Sidenote on aliasing: \
Fundamental frequencies at divisors of the sampling rate have harmonics which only alias at harmonic locations! \
\
\cf3 //These assume 44100Hz output sampling rate\cf4 \
s.sampleRate\
\cf0 \
\cf5 //warning; LOUD, awkward on ear\cf0 \
\{\cf2 LFSaw\cf0 .ar(4410+(\cf2 MouseX\cf0 .kr(0,10).round(1)),0,0.5)\}.scope\
\
\cf5 //aliasing if mouse moved left\cf0 \
\{\cf2 LFSaw\cf0 .ar(1102.5+(\cf2 MouseX\cf0 .kr(0,10).round(1)),0,0.5)\}.scope\
\
\cf5 //no aliasing\cf0 \
\{\cf2 Saw\cf0 .ar(1102.5+(\cf2 MouseX\cf0 .kr(0,10).round(1)),0.5)\}.scope\
\
\
\
\
\
\
\
\
\
\
\
\
Chorusing (detuned oscillators)\
\
\
\{\cf2 Saw\cf0 .ar(440,0.2)\}.play \cf5 //plain\cf0 \
\
\
Though it increases sensory dissonance (beats and roughness between partials), a thicker sound is possible by mixing multiple copies of a waveform generator with subtle differences\
\
\
\{\cf2 Mix\cf0 (\cf2 Saw\cf0 .ar(440*[0.99,1.01],0.2))\}.play \cf5 //plain\cf0 \
\cf5 //if want perceptual (log freq) same difference each side need 0.99 and 0.99.reciprocal, but we'll overlook that for now\cf0 \
\
\
\
\cf5 //Because the oscillators are deterministic, there is a potential problem of highly rigid beating patterns\cf0 \
(\
\cf2 var\cf0  numdetune=4;\
\{\cf2 Mix\cf0 (\cf2 Saw\cf0 .ar(\cf2 Array\cf0 .rand(numdetune,1,1.01)*440,0.2))\}.play\
)\
\
\cf5 //to alter phases need LFSaw; but could also just add some subtle frequency modulation\cf0 \
(\
\{\
\cf2 Mix\cf0 .fill(4,\{\
\cf2 var\cf0  freqmult; \
\
\cf5 //between 1 +- 0.01\cf0 \
freqmult= 1+\cf2 SinOsc\cf0 .ar(\cf2 LFNoise1\cf0 .kr(rrand(0.25,0.5),4,5),pi.rand,0.01);\
\
\cf2 LFSaw\cf0 .ar(440*(freqmult),pi.rand,0.2)\
\
\}) \
\}.play\
)\
\cf5 //question for you; why don't I need to use Rand rather than rrand in this case? \cf0 \
\
\
(\
\{\cf2 Mix\cf0 .fill(4,\{\cf2 Saw\cf0 .ar(440*(1+\cf2 SinOsc\cf0 .ar(\cf2 LFNoise1\cf0 .kr(rrand(0.25,0.5),4,5),pi.rand,0.02)),0.2)\}) \}.play\
)\
\
\
\cf5 //more like an analogue synth though to combine different waveforms in proportion and more overt detunings (ie octaves, octave+fifth)\cf0 \
\
\
\cf5 //make a random mix\cf0 \
\{\cf2 Mix\cf0 .fill(3,\{\cf2 |i|\cf0  [\cf2 LFTri\cf0 , \cf2 LFCub\cf0 , \cf2 LFPar\cf0 ].choose.ar(110*(2**i),pi.rand,10.rand.neg.dbamp)\})\}.play\
\
\
\
\
\
\
\
\
Types of LFNoise for linear random noise between -1 and 1 at a certain rate\
\
(\
\{\
	[\
	\cf2 LFNoise0\cf0 .ar(100),	\cf5 //step\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 	\cf2 LFNoise1\cf0 .ar(100),	\cf5 //linear interpolation\cf0 \
	\cf2 LFNoise2\cf0 .ar(100)	\cf5 //quadratic interpolation\cf0 \
	]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \}.plot(0.1)\
)\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Lag UGen; shortcut is .lag\
\
(\
\{\
\cf2 var\cf0  source; \
\
source= \cf2 LFNoise0\cf0 .ar(10);\
\
[\
\pard\pardeftab560\ql\qnatural
\cf0 	source,			\cf5 //step\cf0 \
	source.lag(0.1)	\cf5 //step with lag of period; so only gets to target value at end of step\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ]\
\}.plot(1.0)\
)\
\
\
\
\
\{\cf2 Ringz\cf0 .ar(\cf2 Saw\cf0 .ar(\cf2 LFNoise0\cf0 .kr(5).lag(0.1).exprange(100,2000),0.2), 1000, 0.01)\}.play\
\
\
\cf5 //occasional double speed is from rounding to nearest 20 Hz; during a lag transition, will cross boundaries in a step fashion \cf0 \
\{\cf2 Ringz\cf0 .ar(\cf2 Saw\cf0 .ar(\cf2 LFNoise0\cf0 .kr(5).lag(0.1).exprange(100,2000).round(20),0.2), 1000, 0.01)\}.play\
\
\
\
Decay UGen\
\
(\
\{\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf2 Decay\cf0 .ar(\cf2 Impulse\cf0 .ar(100),0.01)	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \}.plot(0.1)\
)\
\
\
\
\
See various filters UGens for other smoothing operations, ie Slew or OnePole\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Now to work on the source+filter model for subtractive synthesis \
\
Comparing Filters\
\
\cf5 //standard filter\cf0 \
(\
z = \{\
	\cf2 Resonz\cf0 .ar(\
		\cf2 Mix\cf0 (\cf2 Saw\cf0 .ar([0.99,1,1.01]*440,0.3)),\
		\cf2 MouseX\cf0 .kr(100,20000,\cf6 \\exponential\cf0 ), \cf5 // cutoff freq.\cf0 \
		\cf2 MouseY\cf0 .kr(0.1, 1.0, \cf6 \\linear\cf0 ), \cf5 // rq\cf0 \
		0.5); \cf5 // mul\cf0 \
\}.play\
)\
z.free;\
\
\cf5 //The BEQSuite (sc3-plugins pack) has some nice filters, which take less energy away:\cf0 \
(\
z = \{\
	\cf2 BLowPass4\cf0 .ar(\
		\cf2 Mix\cf0 (\cf2 Saw\cf0 .ar([0.99,1,1.01]*440,0.3)),\
		\cf2 MouseX\cf0 .kr(100,20000,\cf6 \\exponential\cf0 ), \cf5 // cutoff freq.\cf0 \
		\cf2 MouseY\cf0 .kr(0.1, 1.0, \cf6 \\linear\cf0 ), \cf5 // rq \cf0 \
		0.5); \cf5 // mul\cf0 \
\}.play\
)\
\
\
z.free;\
\
\cf5 //can distort at high gain\cf0 \
(\
z = \{\
	\cf2 MoogFF\cf0 .ar(\
		\cf2 Mix\cf0 (\cf2 Saw\cf0 .ar([0.99,1,1.01]*440,0.3)),	\
		\cf2 MouseX\cf0 .kr(100,20000,\cf6 \\exponential\cf0 ), \cf5 // cutoff freq.\cf0 \
		\cf2 MouseY\cf0 .kr(0.1, 4.0, \cf6 \\linear\cf0 ) \cf5 //gain\cf0 \
		);  \
\}.play\
)\
\
z.free;\
\
\
\
\
\
\
\
\
\
\
\
\
\
Triggers\
\
When a signal crosses from a nonpositive value to a positive value. \
\
rounding errors and avoiding positive zero; usually best to force a transition from -0.01 to 1, for example, rather than 0 to 1 \
\
\
\cf5 //trigger whenever crossing from negative to positive\cf0 \
(\
\{\cf2 var\cf0  source, trigger; \
\
source= \cf2 LFNoise0\cf0 .ar(100); \
trigger= \cf2 Trig1\cf0 .ar(source, 0.001); \cf5 //0.05 is duration of trigger signal output\cf0 \
\
[source, trigger]\
\}.plot(0.2)\
)\
\
\cf5 //trigger on all ups\cf0 \
(\
\{\cf2 var\cf0  source, trigger; \
\
source= \cf2 LFNoise0\cf0 .ar(100); \
trigger= \cf2 Trig1\cf0 .ar(source- \cf2 Delay1\cf0 .ar(source), 0.001); \cf5 //0.05 is duration of trigger signal output\cf0 \
\
[source, trigger]\
\}.plot(0.2)\
)\
\
\
\cf5 //trigger on any change\cf0 \
(\
\{\cf2 var\cf0  source, trigger; \
\
source= \cf2 LFNoise0\cf0 .ar(100); \
trigger= \cf2 Trig1\cf0 .ar(abs(source- \cf2 Delay1\cf0 .ar(source)), 0.001); \cf5 //0.05 is duration of trigger signal output\cf0 \
\
[source, trigger]\
\}.plot(0.2)\
)\
\
\
\
\
\
retriggering an envelope via the gate input to an EnvGen\
\
\
\{\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[0.01,0.01]),\cf2 Impulse\cf0 .kr(50))\}.plot(0.1)\
\
\
(\
\{\
\cf2 var\cf0  sound,env, trig; \
\
trig= \cf2 Impulse\cf0 .ar(3); \cf5 //trigger source \cf0 \
\
sound= \cf2 Mix\cf0 (\cf2 LFPulse\cf0 .ar(110*[1,5/2],0.0,0.5,0.2));\
\
env= \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 .perc(0.02,0.2),trig); \cf5 //with retriggering controlled by impulse\cf0 \
\
\cf2 Pan2\cf0 .ar(sound*env,0.0)\
\}.play\
)\
\
\
\
(Note that if the envelope has a release node, the gate input to an EnvGen is used instead as a control which keeps the envelope held open (gate=1) until released (gate=0); see the EnvGen and Env help files)\
\
\
\
\
\
\
\
\
\
\
Triggers can be set up in SynthDefs with a shortcut; they appear in SynthDefs as t_xxxx arguments or as specified as an explicit \\tr in SynthDef rates argument. This is useful when you want to manually force a trigger via a .set message to a Synth \
\
(\
\cf2 SynthDef\cf0 (\cf6 \\mytriggersynth\cf0 ,\{\cf2 arg\cf0  trig=0;\
\cf2 var\cf0  env;\
\
\cf5 //must have additional starting level in envelope, else no nodes to go back to\cf0 \
env= \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([2,2,1],[0.0,0.5],\cf6 'exponential'\cf0 ),trig);\
\
\cf2 Out\cf0 .ar(0,\cf2 Pan2\cf0 .ar(\cf2 Resonz\cf0 .ar(\cf2 Saw\cf0 .ar(env*440),1000,0.1),0.0))\
\},[\cf6 \\tr\cf0 ]).send(s)\
)\
\
a= Synth(\cf6 \\mytriggersynth\cf0 );\
\
a.set(\cf6 \\trig\cf0 , 1)	\cf5 //if this wasn't an explicit trigger input, this wouldn't reset the envelope\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
Another triggering example: you could collect triggers from one signal and use them to spawn changes in another part of the UGen graph\
\
\
\cf5 //value of third frequency component is a new random number with each trigger\cf0 \
(\
\{\
\cf2 var\cf0  sound,env, trig; \
\
trig= \cf2 LFNoise0\cf0 .ar(13)>0; \cf5 //trigger source (might also use Dust, for example)\cf0 \
\
sound= \cf2 Mix\cf0 (\cf2 LFPulse\cf0 .ar(110*[1,5/2,\cf2 TRand\cf0 .ar(3.9,4.1,trig)],0.0,0.5,0.2));\
\
env= \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 .perc(0.02,0.1),trig); \cf5 //with retriggering controlled by impulse\cf0 \
\
\cf2 Pan2\cf0 .ar(sound*env,0.0)\
\}.play\
)\
\
\
Some oscillators can be retriggered, for example SyncSaw\
(sync oscillators; hard sync= immediate reset of slave oscillator, soft sync= wait till start of next period for a reset of state)\
\
\
\
Latch: on a trigger, hold an input value\
\
Allows resampling and triggered rendering\
\
\{\cf2 Latch\cf0 .ar(\cf2 LFNoise2\cf0 .kr(100), \cf2 Impulse\cf0 .ar(100))\}.plot(0.1) \cf5 //removes smoothing!\cf0 \
\
\
\
\
Making a custom hard sync oscillator using an EnvGen and a trigger source\
\
\{\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,0,1,-1,0],\cf2 MouseY\cf0 .kr(0,1)*[0,128,256,128]/\cf2 SampleRate\cf0 .ir),\cf2 Impulse\cf0 .ar(\cf2 MouseX\cf0 .kr(10,300,'exponential')))\}.play\
\
\
\
\
\
\
\
\
\
Demand Rate UGens\
\
A bit like the Patterns library, server side! \
\
Triggers are used in the Demand UGen to cue a 'demand' for a new value from the attached specialist demand rate UGens (which all begin with D and have names analogous to patterns)\
\
(\
\{\cf2 var\cf0  sequence = \cf2 Dseq\cf0 ([-0.3,0.5,0.0,0.4],\cf2 inf\cf0 ); \cf5 //Dseq is demand rate\cf0 \
\
\cf2 Demand\cf0 .ar(\cf2 Impulse\cf0 .ar(10),0, sequence);\
\}.plot(1.0)\
)\
\
\
So far, similar functionality might be constructed with Select, Index, EnvGen, IEnvGen et al\
\
\
But akin to patterns, nesting is possible: \
\
\
(\
\{\cf2 var\cf0  sequence = \cf2 Dseq\cf0 ([-0.3,\cf2 Drand\cf0 ([-1,1],1),0.0,0.4],\cf2 inf\cf0 ); \cf5 //Dseq is demand rate\cf0 \
\
\cf2 Demand\cf0 .ar(\cf2 Impulse\cf0 .ar(100),0, sequence);\
\}.plot(1.0)\
)\
\
\
\
\
\
Musical use: \
\
(\
\{\cf2 var\cf0  freq, sequence = \cf2 Dseq\cf0 ([60,\cf2 Drand\cf0 ([48,72],1),63,62.8],\cf2 inf\cf0 ); \cf5 //Dseq is demand rate\cf0 \
\
freq= \cf2 Demand\cf0 .kr(\cf2 Impulse\cf0 .kr(\cf2 MouseX\cf0 .kr(1,100)),0, sequence).midicps; \cf5 //only need k-rate; used a-rate in last examples because final output in UGen graph needs to be audio rate\cf0 \
\
\cf2 Saw\cf0 .ar(freq, 0.1)\
\}.play\
)\
\
\
\cf5 //multichannel use 1 (multichannel expansion gives independent sequences)\
\cf0 (\
\{\cf2 var\cf0  freq, sequence = \cf2 Dseq\cf0 ([60,\cf2 Drand\cf0 ([47,73],1),63,61.5],\cf2 inf\cf0 ); \cf5 //Dseq is demand rate\cf0 \
\
freq= \cf2 Demand\cf0 .kr(\cf2 Impulse\cf0 .kr([5,5.1]),0, sequence).midicps; \cf5 //output is two channels, since Dseq has two output values\cf0 \
\
\cf2 SyncSaw\cf0 .ar(freq, \cf2 300\cf0 ,0.1);\
\}.play\
)\cf5 \
\cf0 \
\
\cf5 //multichannel use 2 (multichannel sequence itself)\cf0 \
(\
\{\cf2 var\cf0  freq, sequence = \cf2 Dseq\cf0 ([[60,48],\cf2 Drand\cf0 ([48,72],1),63,[61,62.8],[55,62.5],[63,62.1]],\cf2 inf\cf0 ); \cf5 //Dseq is demand rate\cf0 \
\
freq= \cf2 Demand\cf0 .kr(\cf2 Impulse\cf0 .kr(5),0, sequence).midicps; \cf5 //output is two channels, since Dseq has two output values\cf0 \
\
[\
\cf2 SyncSaw\cf0 .ar(freq[0], \cf2 LFNoise0\cf0 .kr(7,100,230),0.1),\
\cf2 SyncSaw\cf0 .ar(freq[1], \cf2 LFNoise2\cf0 .kr(17,400,630),0.1)\
]\
\}.play\
)\
\
\
\
\
More demanding: Duty allows you to specify a duration sequence for controlling when the next value is demanded\
\
\cf5 //interaction of durations for holding current value and output value sequence\cf0 \
\{\cf2 Duty\cf0 .ar(\cf2 Dseq\cf0 ([0.025,0.05],\cf2 inf\cf0 ),0,\cf2 Dseq\cf0 ([-0.5,0.5,0,-1,1],\cf2 inf\cf0 ))\}.plot(0.6)\
\
\
\
\
\
\
The next three examples are provided as more involved patches; you might want to try to work out what is going on! \
\
\
\cf5 //putting various things together: rhythmic synthesis\cf0 \
(\
\{\cf2 var\cf0  freq, filterfreq, source, filtered;\
\cf2 var\cf0  tempo;\
\
tempo= 0.5; \cf5 //seconds per beat\cf0 \
\
freq= \cf2 Duty\cf0 .kr(\cf2 Dseq\cf0 ([0.25,0.25,0.5,0.75,0.75,0.75,0.25,0.25,0.25]*tempo,\cf2 inf\cf0 ),0,\cf2 Dseq\cf0 ([60,62,63,65,67,55,53,\cf2 Drand\cf0 ([51,49,58,70],1),70,\cf2 Drand\cf0 ([70, 48,72,36],1)],\cf2 inf\cf0 )).midicps;\
\
filterfreq= \cf2 Duty\cf0 .kr(\cf2 Dseq\cf0 ([0.25,0.25,0.25,0.25,1.0]*tempo,\cf2 inf\cf0 ),0,\cf2 Dseq\cf0 (\cf2 Array\cf0 .fill(16,\{exprand(300,5000)\}),\cf2 inf\cf0 ));\
\
source= \cf2 Mix\cf0 (\cf2 SyncSaw\cf0 .ar([1,0.5,0.25,1.01, 1.25]*(freq.lag(0.05)),\cf2 LFNoise2\cf0 .kr([0.25,0.5,1,2,4]*(tempo*2),200,300), 0.1));\
\
filtered= \cf2 BLowPass4\cf0 .ar(source,filterfreq.lag(0.0625),0.5);\
\
\cf2 Pan2\cf0 .ar(filtered, \cf2 LFNoise1\cf0 .kr(tempo,0.25))\
\}.play\
)\
\cf5 //note that if you make the Duty's .ar you'll see a substantial increase in CPU usage!\cf0 \
\
\
\
\
\
\
\
\
(\
\{\
\cf2 var\cf0  source, filter, env; \
\cf2 var\cf0  trig, freq, freq2; \
\
trig= \cf2 Impulse\cf0 .kr(8,[0,0.1]); \cf5 //stereo here forces stereo throughout the graph, including generating different notes\cf0 \
\cf5 //trig= Impulse.kr(8);\cf0 \
\
\cf5 //sequencer via Demand UGens\cf0 \
freq= \cf2 Demand\cf0 .kr(trig,0,\cf2 Drand\cf0 ([60,63,60,63,65,63,70,67, 60,62,60,63,65,63,70,67, 67,72,75,72,67,70,63,55],\cf2 inf\cf0 )).midicps;\
\
\cf5 //portamento via lag\cf0 \
source= \cf2 Mix\cf0 .fill(4,\{\cf2 |i|\cf0  \cf2 LFSaw\cf0 .ar((freq*[0.25*1.5,0.125]).lag(\cf2 MouseY\cf0 .kr(0.0,0.15))*((2**(i))+\cf2 SinOsc\cf0 .ar(\cf2 LFNoise1\cf0 .kr(rrand(0.25,0.5),4,5),pi.rand,0.01)),pi.rand,0.2)\});\
\
\cf5 //if using Saw instead\cf0 \
\cf5 //source= Mix.fill(4,\{|i| Saw.ar((freq*[0.25*1.5,0.125]).lag(MouseY.kr(0.0,0.15))*((2**(i))+SinOsc.ar(LFNoise1.kr(rrand(0.25,0.5),4,5),pi.rand,0.01)),0.2)\});\cf0 \
\
\cf5 //envelope is restarted by trigger MouseX.kr(0.25,0.125)\cf0 \
env= \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[0.01,0.25]),trig);\
\
filter= \cf2 BLowPass\cf0 .ar(0.5*source,300+(\cf2 MouseX\cf0 .kr(100,20000,\cf6 'exponential'\cf0 )*env),0.2, env);\
\
\cf5 //Pan2.ar(filter,0.0);\cf0 \
 \}.play\
)\
\
\
\
\
\
\
\
\
\
\
\cf5 //using InterplEnv\cf0 \
(\
\{\
\cf2 var\cf0  source, filter; \
\cf2 var\cf0  freq; \
\
freq= \cf2 IEnvGen\cf0 .kr(\cf2 InterplEnv\cf0 ([60,62,63,67,70,67,70,72,48].scramble,0.125.dup(8)),\cf2 Phasor\cf0 .ar(\cf2 LFNoise0\cf0 .kr(1)>0,0.5*(1.0/\cf2 SampleRate\cf0 .ir),0.0,1.0).round(1/8)).midicps;\
\
source= \cf2 Mix\cf0 .fill(5,\{\cf2 |i|\cf0  \cf2 Saw\cf0 .ar(freq*(0.25*(2**(i))+\cf2 SinOsc\cf0 .ar(\cf2 LFNoise1\cf0 .kr([0.125,0.25,0.5].choose,7,8),pi.rand,0.01)),0.2)\});\
\
filter= \cf2 BLowPass\cf0 .ar(0.5*source,1000+(2000*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[0.01,0.25]),\cf2 Impulse\cf0 .kr(2))),0.2);\
\
\cf2 Limiter\cf0 .ar(\cf2 GVerb\cf0 .ar(filter*0.25) + \cf2 Pan2\cf0 .ar(filter))\
 \}.play\
)\
\
\
\
\
\
\
\
\
\
\
}