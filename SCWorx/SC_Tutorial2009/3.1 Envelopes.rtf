{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset77 Geneva;}
{\colortbl;\red255\green255\blue255;\red0\green255\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green191\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf2 Time varying sounds\cf0 \
\
We have been making sounds so far that go on forever until we press a key to stop synthesising. \
\
Most of the time, we'll want to make sounds that go on for a limited time, and stop of their own accord. \
\
Listen to the difference between these two:\
\
\{\cf3 SinOsc\cf0 .ar(440,0,0.1)\}.scope						\cf4 //Sine Oscillator goes on forever\
\cf0 \
\{\cf3 SinOsc\cf0 .ar(440,0,\cf3 Line\cf0 .kr(0.1,0.0,1.0))\}.scope	 	\cf4 //One second for the sine to disappear entirely\
\cf0 \
\
In the second example, I multiplied the sine wave by a line generator that started at 0.1 but went \
to zero over the course of a second.\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf5 Envelopes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
In general, we want total control over how parameters of a sound (like volume or frequency) vary over time. \
This is often done by using envelopes. \
\
\cf4  //help files- [Env] [EnvGen]\
\cf0 \
\cf3 Env\cf0 .new([1,0,1],[1.0,0.5]).plot  \cf4 //This makes an Envelope with three control points, at y positions given by the first array, and separated in x by the values in the second (see the Env help file)\cf0 \
\
The .plot gives a quick way of seeing the envelope- we won't need it for synthesis but it helps for you to see some envelope shapes\
\
\cf4 //various types of envelope demonstrated:\cf0 \
			\
\cf3 Env\cf0 .new([0,1,0],[1.0,0.5]).plot  \cf4 //one second 0 to 1 then half a second 1 to 0\cf0 \
\
\cf3 Env\cf0 .linen(0.03,0.5,0.1).plot  \cf4 //linen has arguments attack, sustain, release, level, curve\cf0 \
\
\cf3 Env\cf0 .adsr(0.01, 0.5, 0.5, 0.1).plot  \cf4 //attack, decay, sustain level, release, level, curve\
\cf0 \
Here's another type of Envelope, good for making percussion sounds:\
\
\cf3 Env\cf0 .perc(0.05,0.5,1.0,0).plot \cf4 //arguments attack, release, level, curve- good for percussive hit envelopes\
\cf0 \
There are many more types of Envelope to discover and utilise\
\cf4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf0 \
Let's start using Envelopes for synthesis. We use EnvGen to run the desired Envelope over time.\
\
This is the envelope we'll run:\
\
\cf3 Env\cf0 .new([1,0],[1.0]).plot		\
\
This is just running the Envelope- its too slow to hear any sounds (your ears only pick frequencies over 16-20Hz)\
\
\{\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .new([1,0],[1.0]))\}.scope\
\
This is multiplying a simple sine tone at 440Hz by the envelope over time, to make a limited duration sound\
\
\{\cf3 SinOsc\cf0 .ar(440,0,0.1)*\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([1,0],[1.0]))\}.scope\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Let's try a slightly more complex example-\
\
I'm going to use an envelope for frequency:\
\
\cf3 Env\cf0 .new([1000,20],[1.0]).plot		\cf4 \
\
\cf0 The EnvGen gets plugged into the frequency input of the Saw wave:\
\
\{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .new([1000,20],[1.0])),0.1)\}.scope	 \cf4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cf0 Now even more complex, I'll change the frequency of Saw over 0.5 second and have its amplitude go to zero over 2 seconds:\
\
\{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .new([10000,20],[0.5])),\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 .new([0.1,0],[2.0])))\}.scope	 	\cf4 \
\
\
\cf0 You can see how the nesting can get more and more complex, and its now very difficult to read \
the code to see what's going on. This should really be neatened up by writing over a few lines-\
\
(\{\
	\cf3 Saw\cf0 .ar(\
		\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([10000,20],[0.5])),  \cf4 //frequency input\cf0 \
		\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([0.1,0],[2.0]))          \cf4 //amplitude input\cf0 \
	)\
\}.play\
)\
\
In SuperCollider you can find yourself having to work out what is plugged into what for complex networks,\
all written as text. Remember that it may help you if you draw a diagram on paper of the connections. \
\
\
\
\
\
\
\
\
\
\
\
\
I made one subtle difference when I rewrote it- I ran the EnvGen ar control rate (.kr) rather than audio rate (.ar). \
\
We've tried both .kr or .ar and there's no real difference to our ears.\
\
We often use .kr when possible, because it means a lower CPU load and ultimately we can run many more\
oscillators at once. \cf4 \
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Envelopes have a further use of prime importance- they can cause a running collection of UGens to be deallocated once a multiplier envelope has run through its course. \
\
Peeking ahead, you will see virtues of this when we look at spawning events live- you don't want completed voices hanging around and wasting your CPU when you could be synthesising new voices.\
\
\cf4 //FM sound\cf0 \
(\{\
\cf3 SinOsc\cf0 .ar(\
	\cf3 SinOsc\cf0 .ar(10,0,10,440),\
	0.0,\
	\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([0.5,0.0],[1.0]), doneAction:2)\
	)\
\}.scope\
)\
\
The doneAction argument means that the envelope on completion causes its enclosing synthesiser to be freed.\
\
The only thing that matters is how long the envelope lasts in time: the following also deallocates \
when the envelope ends \cf4 \
\
\cf0 \{\cf3 Saw\cf0 .ar(\cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .new([500,100],[1.0]),doneAction:2),0.1)\}.scope\
\
Note how the internal server status GUI shows no running Synths once this is deallocated. \cf4 \
\
\
\
\
\
\
\
\
\
\
\cf0 \
\
\
\
\
\
We already saw some UGens that can be used like Envelopes, without the two stage \
Env/EnvGen construction. They work in deallocation too- here are examples:\
\
\cf3 Line\cf0 		\cf4 //straight line generator		\
\cf0 \
\cf3 XLine\cf0 		\cf4 //exponential line generator\
\cf0 \
\
\{\cf3 Saw\cf0 .ar(\cf3 SinOsc\cf0 .ar(1,0,10,440),\cf3 Line\cf0 .kr(0,1,1,doneAction:2))\}.scope\
\
\{\cf3 Saw\cf0 .ar(\cf3 SinOsc\cf0 .ar(1,0,10,440),\cf3 XLine\cf0 .kr(0.0001,1,1,doneAction:2))\}.scope\
\
\
}