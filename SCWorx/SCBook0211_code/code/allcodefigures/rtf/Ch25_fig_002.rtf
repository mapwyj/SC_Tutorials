{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red96\green96\blue96;
\red191\green0\blue0;}
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\sl480\slmult1

\f0\fs18 \cf2 Figure\cf3  25.2\
#include \cf4 "SC_PlugIn.h"\cf3 \
\pard\pardeftab720
\cf3 \
static \cf2 InterfaceTable\cf3  *ft;\
\
\cf5 // the struct will hold data which we want to "pass" from one function to another\cf3 \
\cf5 // e.g. from the constructor to the calc func, \cf3 \
\cf5 // or from one call of the calc func to the next\cf3 \
struct \cf2 Flanger\cf3  : public \cf2 Unit\cf3   \{\
	float rate, delaysize, fwdhop, readpos;\
	int writepos;\
	\
	\cf5 // a pointer to the memory we'll use for our internal delay\cf3 \
	float *delayline;\
\};\
\
\cf5 // function declarations, exposed to C\cf3 \
extern \cf4 "C"\cf3  \{  \
	void load(\cf2 InterfaceTable\cf3  *inTable);\
	void \cf2 Flanger_Ctor\cf3 (\cf2 Flanger\cf3  *unit);\
	void \cf2 Flanger_next\cf3 (\cf2 Flanger\cf3  *unit, int inNumSamples);\
	void \cf2 Flanger_Dtor\cf3 (\cf2 Flanger\cf3  *unit);\
\}\
\
\
void \cf2 Flanger_Ctor\cf3 ( \cf2 Flanger\cf3  *unit ) \{\
	\
	\cf5 // Here we must initialise state variables in the Flanger struct.\cf3 \
	unit->delaysize = \cf2 SAMPLERATE\cf3  * 0.02f; \cf5 // Fixed 20ms max delay\cf3 \
	\cf5 // Typically with reference to control-rate/scalar-rate inputs.\cf3 \
	float rate  = \cf2 IN0\cf3 (1);\
	\cf5 // Rather than using rate directly, we're going to calculate the size of \cf3 \
	\cf5 // jumps we must make each time to scan through the delayline at "rate"\cf3 \
	float delta = (unit->delaysize * rate) / \cf2 SAMPLERATE\cf3 ;\
	unit->fwdhop = delta + 1.0f;\
	unit->rate = rate;\
	unit->writepos = 0;\
	unit->readpos = 0;\
	\
	\cf5 // Allocate the delay line\cf3 \
	unit->delayline = (float*)\cf2 RTAlloc\cf3 (unit->mWorld, unit->delaysize * sizeof(float));\
	\cf5 // Initialise it to zeroes\cf3 \
	memset(unit->delayline, 0, unit->delaysize * sizeof(float));\
	\
	\cf5 // IMPORTANT: This tells scsynth the name of the calculation function \cf3 \
	\cf5 //for this UGen.\cf3 \
	\cf2 SETCALC\cf3 (\cf2 Flanger_next\cf3 );\
	\
	\cf5 // Should also calc 1 sample's worth of output \'96 \cf3 \
	\cf5 //ensures each ugen's "pipes" are "primed"\cf3 \
	\cf2 Flanger_next\cf3 (unit, 1);\
\}\
\
void \cf2 Flanger_next\cf3 ( \cf2 Flanger\cf3  *unit, int inNumSamples ) \{\
	\
	float *in = \cf2 IN\cf3 (0);\
	float *out = \cf2 OUT\cf3 (0);\
	\
	float depth = \cf2 IN0\cf3 (2);\
	\
	float rate    = unit->rate;\
	float fwdhop  = unit->fwdhop;\
	float readpos = unit->readpos;\
	float *delayline = unit->delayline;\
	int writepos  = unit->writepos;\
	int delaysize = unit->delaysize;\
\
	float val, delayed, currate;\
	\
	currate = \cf2 IN0\cf3 (1);\
	\
	if(rate != currate)\{\
		\cf5 // rate input needs updating\cf3 \
		rate = currate;\
		fwdhop = ((delaysize * rate * 2) / \cf2 SAMPLERATE\cf3 ) + 1.0f;\
	\}\
	\
	for ( int i=0; i<inNumSamples; ++i) \{\
		val = in[i];\
		\
		\cf5 // Write to the delay line\cf3 \
		delayline[writepos++] = val;\
		if(writepos==delaysize)\
			writepos = 0;\
		\
		\cf5 // Read from the delay line\cf3 \
		delayed = delayline[(int)readpos];\
		readpos += fwdhop;\
		\cf5 // Update position, NB we may be moving forwards or backwards \cf3 \
		\cf5 //(depending on input)\cf3 \
		while((int)readpos >= delaysize)\
			readpos -= delaysize;\
		while((int)readpos < 0)\
			readpos += delaysize;\
		\
		\cf5 // Mix dry and wet together, and output them\cf3 \
		out[i] = val + (delayed * depth);\
	\}\
	\
	unit->rate = rate;\
	unit->fwdhop = fwdhop;\
	unit->writepos = writepos;\
	unit->readpos = readpos;\
\}	\
\
void \cf2 Flanger_Dtor\cf3 ( \cf2 Flanger\cf3  *unit ) \{\
	\cf2 RTFree\cf3 (unit->mWorld, unit->delayline);\
\}	\
\
void load(\cf2 InterfaceTable\cf3  *inTable) \{\
	\
	ft = inTable;\
	\
	\cf2 DefineDtorUnit\cf3 (\cf2 Flanger\cf3 );\
\}\
}