{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
}
\deftab1134
\pard\pardeftab1134\fi300\ri-1332\sb60\qj

\f0\fs24 \cf0 \
\pard\pardeftab1134\ql\qnatural
\cf0 Server.default = s = \cf2 Server\cf0 .internal;\
s.boot;\
(\
n = 512; \cf3 // number of bins\cf0 \
b = \cf2 Buffer\cf0 .alloc(s, n, 1);\
c = \cf2 Buffer\cf0 .alloc(s, n, 1);\
\
\cf3 // create arrays of magnitude scalars and load them to buffers\cf0 \
d = \cf2 Array\cf0 .fill(n, \{1.0.linrand\});\
e = 1.0 - d;\
d = \cf2 Buffer\cf0 .loadCollection(s, d);\
e = \cf2 Buffer\cf0 .loadCollection(s, e);\
\
f = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/a11wlk01.wav"\cf0 );\
)\
\
(\
x = \cf2 SynthDef\cf0 (\cf4 "spectral diffusion"\cf0 , \{ \cf2 arg\cf0  out=0, analBuf, analBufCopy, scalBuf1, scalBuf2, soundBuf;\
 \cf2 var\cf0  chain1, chain2;\
 chain1 = \cf2 FFT\cf0 (analBuf, \cf2 PlayBuf\cf0 .ar(1, soundBuf, \cf2 BufRateScale\cf0 .kr(soundBuf), loop: 1));\
 chain2 = \cf2 PV_Copy\cf0 (chain1, analBufCopy); \cf3 // copy the initial analysis\cf0 \
 chain1 = \cf2 PV_MagMul\cf0 (chain1, scalBuf1);\
 chain2 = \cf2 PV_MagMul\cf0 (chain2, scalBuf2); \
 \cf2 Out\cf0 .ar(out,  0.5 * \cf2 IFFT\cf0 ([chain1, chain2]));\
\}).play(s,[out: 0, analBuf: b, analBufCopy: c, scalBuf1: d, scalBuf2: e, soundBuf: f]);\
s.scope; \cf3 // compare the two channels\cf0 \
)\
\
\cf3 // execute this multiple times to change the distribution\cf0 \
(\
g = \cf2 Array\cf0 .fill(n, \{1.0.linrand\});\
h = 1 - g;\
d.loadCollection(g);\
e.loadCollection(h);\
)\
\
x.free; [b, c, d, e, f].do(\cf2 _\cf0 .free);
\fs18 \
}