{\rtf1\ansi\ansicpg1252\cocoartf949
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs40 \cf2 // frontBack \'96 analytic\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
~backCross.fadeTime = 4;\
~backCross = \{\cf3 |amp = 1|\cf0 \
	\cf3 var\cf0  trig;\
	\cf3 var\cf0  numObj = 3;\
	\cf2 // compute trigger for change of side\cf0 \
	\cf3 var\cf0  in = ~isLeft.kr(numObj);\
	\cf3 var\cf0  height = ~height.kr(numObj);\
	\cf3 var\cf0  front = ~isFront.kr(numObj);\
	\cf3 var\cf0  aEnv, fEnv;\
	\cf3 var\cf0  noise, aEnvNoise;\
	\
	\
	trig = \cf3 Trig1\cf0 .ar((in - \cf3 Delay1\cf0 .kr(in)).abs - 1, 0.00001) > 0.5;\
\
	\cf2 // only trigger if behind the body and near ground\cf0 \
	trig = trig * (front < 0) * (height < 0.26);\
	\
	aEnv = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.05, 2), gate: trig);\
	aEnvNoise = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.01, 0.1), gate: trig);\
\
	fEnv = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.01, 0.1), gate: trig, levelScale: 900, levelBias: 50);\
	\
	noise = \cf3 WhiteNoise\cf0 .ar;\
\
	aEnv * (0.2*noise*aEnvNoise + \cf3 SinOsc\cf0 .ar(fEnv * (height *8).squared * 0.4, 0, 1.5).softclip) * amp * 0.1\
\};\
\
~foreCross = \{\cf3 |amp = 1|\cf0 \
	\cf3 var\cf0  trig;\
	\cf3 var\cf0  numObj = 3;\
	\cf2 // compute trigger for change of side\cf0 \
	\cf3 var\cf0  in = ~isLeft.kr(numObj);\
	\cf3 var\cf0  height = ~height.kr(numObj);\
	\cf3 var\cf0  front = ~isFront.kr(numObj);\
	\cf3 var\cf0  aEnv, fEnv;\
	\cf3 var\cf0  noise, aEnvNoise;\
	\
	\
	trig = \cf3 Trig1\cf0 .ar((in - \cf3 Delay1\cf0 .kr(in)).abs - 1, 0.00001) > 0.5;\
\
	\cf2 // only trigger if in front of the body and near ground\cf0 \
	trig = trig * (front > 0) * (height < 0.26);\
	\
	aEnv = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.05, 2), gate: trig);\
	aEnvNoise = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.01, 0.1), gate: trig);\
\
	fEnv = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.01, 0.1), gate: trig, levelScale: 500, levelBias: 50);\
	\
	\cf2 // noise = LFDNoise0.ar(height * MouseX.kr(0.1, 20).poll(label: "c"));\cf0 \
	noise = \cf3 WhiteNoise\cf0 .ar;\
\
	aEnv * (0.2*noise*aEnvNoise + \cf3 SinOsc\cf0 .ar(fEnv * (height+0.4 *8).squared * 0.4, 0, 2).softclip) * amp * 0.1\
\};\
\
~rrCIn = \{\cf3 Mix\cf0 .ar([~foreCross.ar, ~backCross.ar])* 0.6\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~roomRotateClubs = \{\cf3 |phiOffset = 0|\cf0 \
	\cf3 var\cf0  phi, rSquare;\
	\cf3 var\cf0  out;\
	\cf3 var\cf0  s0, phi0, height0;\
	\
	\
	# phi, rSquare = ~polarRelHead.kr.reshape(2, 3);\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	out = [~rrCIn.ar, phi, ~height.kr].flop.collect\{\cf3 |it|\cf0 \
		s0 = it[0];\
		phi0 = it[1];\
		height0 = it[2];\
		\
		\cf3 TorusPanAz\cf0 .ar(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 			[12, 8, 4],\
			s0,	\cf2 // src\cf0 \
			(phi0 * -pi.reciprocal + 0.5) + phiOffset, \
			(height0 - 0.2).clip(0, 0.3) * 4.4, \
			1,\
			2,\
			2,\
			hOrients: [0, -0.5, -0.5]\
		)\
	\}.sum;\
\};}