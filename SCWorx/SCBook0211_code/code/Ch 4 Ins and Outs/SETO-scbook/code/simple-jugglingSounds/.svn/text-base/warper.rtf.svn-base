{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 Spec\cf3 .add(\cf4 \\phiOffset\cf3 , [0, 2pi]);\
\cf2 Spec\cf3 .add(\cf4 \\randRatio\cf3 , [0.0001, 1]);\
\
\cf5 /* testBuffer\
q.buffers[0].loadCollection(\{1.0.rand\}!(3*44100)); // */\cf3 \
\
~warp.ar(24)\
~warp.set(\cf4 \\startBuf\cf3 , q.bufferC.first.bufnum);\
~warp.map(\cf4 \\t_changeTrig\cf3 , ~regionChanged);\
~warp.map(\cf4 \\bufOffset\cf3 , ~region);\
\
q.bufferC.first.plot\
~warp.group.set(\cf4 \\t_changeTrig\cf3 , 1)\
\
\cf5 /*\
~warp.set(\\t_changeTrig, 1)\
\
q.scope = q.scope ?? \{CUBEScope(numRings:[12, 8, 4])\};\
\
~a = \{~region.kr.first.poll\}\
~a.clear\
~b  = \{Crackle.ar * 0.01\}\
~b.clear\
*/\cf3 \
\
\cf5 /*\
~warp.clear // */\cf3 \
(\
~warp = \{ \cf2 |startBuf = 0, bufOffset = 0, amp = 0.1, t_changeTrig = 1, phiOffset = 0, randRatio = 0.1|\cf3 \
	\cf2 var\cf3  changeFreq = 0.05;\
\cf5 //	var changeTrig;\cf3 \
	\cf2 var\cf3  out;\
	\cf2 var\cf3  which;\
	\cf2 var\cf3  src;\
	\cf2 var\cf3  numLayers = 9;\
	\cf2 var\cf3  phi, rSquare;\
\
	\cf2 var\cf3  vAmp = (~rotVel.kr.lag(0.2)*0.1)**2;\
\cf5 //	var vAmp = SinOsc.kr(0)+1!3;\cf3 \
	\
	src = \cf2 Warp1\cf3 .ar(\
		bufnum: (startBuf+bufOffset), \
		pointer: \
			(\{\cf2 Demand\cf3 .kr(t_changeTrig, 0, \cf2 Dwhite\cf3 (0, 1))\}!numLayers),\
		freqScale: \
			\cf2 Lag2\cf3 .kr(\{\
				\cf2 Demand\cf3 .kr(\
					t_changeTrig, \
					0, \
					\cf2 Dwhite\cf3 (0.0125, 2), \
					changeFreq.reciprocal * 0.25\
				)\
			\}!numLayers),\
		windowSize: \
			\cf2 Lag2\cf3 .kr(\{\cf2 Demand\cf3 .kr(t_changeTrig, 0, \cf2 Dwhite\cf3 (0.23, 0.41))\}!numLayers),\
		overlaps: \
			5,\
		\cf5 //overlaps: EnvGen.ar(Env.perc(5, 5), gate: Dust.ar(0.05), levelBias: 2, levelScale: 2),\cf3 \
		windowRandRatio: randRatio\
	).clump(3).sum\
		* ( amp * vAmp * (vAmp > 0.02).lag(0.05));\
\cf5 //\'ca	~height.kr(1).poll;\cf3 \
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	# phi, rSquare = ~polarClub.kr.reshape(2, 3);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 	out = [phi, ~height.kr, src].flop.collect\{\cf2 |it|\cf3 \
		\cf2 TorusPanAz\cf3 .ar(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 			[12, 8, 4],\
			it[2],	\cf5 // src\cf3 \
			(it[0] * -pi.reciprocal + 0.5) + phiOffset, \
			(it[1] - 0.2).clip(0, 0.3) * 4.4, \
			1, \
			2,\
			2,\
			
\f1\b\fs24 hOrients: 
\f0\b0\fs18 [0, -0.5, -0.5]\
		)\
	\}.sum;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \};\
)\
\
\
\
(\
~warp = \{ \cf2 |startBuf = 0, bufOffset = 0, amp = 0.1, t_changeTrig = 1, phiOffset = 0, randRatio = 0.1|\cf3 \
	\cf2 var\cf3  changeFreq = 0.05;\
\cf5 //	var changeTrig;\cf3 \
	\cf2 var\cf3  out;\
	\cf2 var\cf3  which;\
	\cf2 var\cf3  srcs;\
	\cf2 var\cf3  numLayers = 9;\
	\cf2 var\cf3  phi, rSquare;\
	\cf2 var\cf3  trig;\
	\cf2 var\cf3  vAmp = (~rotVel.kr.lag(0.2)*0.1)**2;\
\cf5 //	var vAmp = SinOsc.kr(0)+1!3;\cf3 \
	\
	trig = \cf2 Impulse\cf3 .ar(~rotVel.kr * 5).dup(3).flat;\
	\
	srcs = \cf2 TGrains\cf3 .ar(\
		2, \
		trigger: trig, \
		bufnum: (startBuf+bufOffset), \
		rate: \cf2 Lag2\cf3 .kr(\{\
			\cf2 Demand\cf3 .kr(\
				t_changeTrig, \
				0, \
				\cf2 Dwhite\cf3 (0.0125, 2), \
				changeFreq.reciprocal * 0.25\
			)\
		\}!numLayers),\
		centerPos: (\{\cf2 Demand\cf3 .kr(t_changeTrig, 0, \cf2 Dwhite\cf3 (0, 1))\}!numLayers),\
		dur: \cf2 Lag2\cf3 .kr(\{\cf2 Demand\cf3 .kr(t_changeTrig, 0, \cf2 Dwhite\cf3 (0.23, 0.41))\}!numLayers),\
		pan: (\{\cf2 Demand\cf3 .kr(trig, 0, \cf2 Dwhite\cf3 (-1.0, 1))\}!numLayers),\
	).clump(3).collect(\cf2 _\cf3 .sum)\
		* ( amp * vAmp * (vAmp > 0.02).lag(0.05));\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	\
	# phi, rSquare = ~polarClub.kr.reshape(2, 3);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 	out = [phi, ~height.kr, srcs].flop.collect\{\cf2 |it|\cf3 \
		\cf2 var\cf3  chans = it[2];\
		\cf2 var\cf3  hPos = (it[0] * -pi.reciprocal + 0.5) + phiOffset;\
		\cf2 var\cf3  vPos = (it[1] - 0.2).clip(0, 0.3) * 4.4;\
		chans.collect\{\cf2 |chan, i|\cf3  \
			\cf2 TorusPanAz\cf3 .ar(\
				[12, 8, 4],\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 				chan,	\cf5 // src\cf3 \
				hPos + (i * 0.5),\
				vPos,\
				1, \
				2,\
				2,\
				
\f1\b\fs24 hOrients: 
\f0\b0\fs18 [0, -0.5, -0.5]\
			)\
		\}.sum\
	\}.sum;\
\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 )\
\
}