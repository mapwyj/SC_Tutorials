{\rtf1\mac\ansicpg10001\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs20 \cf2 // "Rainy Route 79" ver.1.1.2\
// by Takuro Hishikawa a.k.a. umbrella_process\cf0 \
\
\cf2 // SynthDefs\cf0 \
(\
\cf2 //// melody\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_m"\cf0 , \{\
	\cf3 arg\cf0  note, pan, amp, outBus=0;\
	\cf3 var\cf0  scale, buffer, freq, signal, env;\
	env = \cf3 Env\cf0 .adsr(0.01,0.1,0.5,0.1,-4);\
	scale=\cf3 FloatArray\cf0 [0,2,3,5,7,8,10];\
	buffer = \cf3 Buffer\cf0 .alloc(s, scale.size,1, \{\cf3 |b|\cf0  b.setnMsg(0, scale) \});\
	freq = \cf3 DegreeToKey\cf0 .kr(\
				buffer.bufnum,\
				note,		\cf2 // input\cf0 \
				12,			\cf2 // 12 notes per octave\cf0 \
				1,			\cf2 // mul = 1\cf0 \
				37			\cf2 // offset by 53 notes\cf0 \
			).midicps;\
	signal = \cf3 SinOsc\cf0 .ar(freq, 0, amp * 0.22);\
	\cf3 Out\cf0 .ar(outBus,\cf3 Pan2\cf0 .ar(\cf3 EnvGen\cf0 .ar(env) * signal.abs.trunc(0.008) * (signal.sign), pan));\
\}).load(s);\
\
\cf2 //// kick\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_kick"\cf0 ,\{\
	\cf3 arg\cf0  amp, dur, pan=0, outBus=0;\
	\cf3 var\cf0  env1, env2, mod, signal;\
	env1 = \cf3 Env\cf0 .new([0.001,1,0.7,0.6,0], [0.001,0.003,0.03,0.1], -3);\
	env2 = \cf3 Env\cf0 .perc(0.001, 0.01, 1, -3);\
	mod = \cf3 EnvGen\cf0 .ar(env2)*300;\
	signal = \cf3 SinOsc\cf0 .ar(mod+37.midicps, 0, amp);\
	\cf3 Out\cf0 .ar(outBus,\cf3 Pan2\cf0 .ar(\cf3 EnvGen\cf0 .ar(env1, doneAction: 2)*signal, pan));\
\}).load(s);\
\
\cf2 //// snare\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_snare"\cf0 ,\{\
	\cf3 arg\cf0  amp, dur, pan=0, outBus=0;\
	\cf3 var\cf0  env1, env2, x;\
	env1 = \cf3 Env\cf0 .perc(0.01, 0.2, 1, -3);\
	env2 = \cf3 Env\cf0 .perc(0, 0.01, 1, -3);\
	x = \cf3 RHPF\cf0 .ar(\
		\cf3 EnvGen\cf0 .ar(env2) * \cf3 SinOsc\cf0 .ar(250,0,amp)\
		+\
		\cf3 WhiteNoise\cf0 .ar(amp * 0.10),\
		150, 0.5\
	);\
	\cf3 Out\cf0 .ar(outBus,\
		\cf3 Pan2\cf0 .ar(\
			\cf3 EnvGen\cf0 .ar(env1,doneAction: 2) *\
			x.abs.trunc(0.01) * (x.sign),\
		pan\
		)\
	);\
\}).load(s);\
\
\cf2 //// hihat\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_hh"\cf0 ,\{\
	\cf3 arg\cf0  amp, dur, pan, outBus=0;\
	\cf3 var\cf0  env1, env2;\
	env1 = \cf3 Env\cf0 .perc(0, 0.1, 1, -6);\
	\cf3 Out\cf0 .ar(outBus,\
		\cf3 Pan2\cf0 .ar(\
			\cf3 EnvGen\cf0 .ar(env1,doneAction: 2)*\cf3 RHPF\cf0 .ar(\
				\cf3 LFClipNoise\cf0 .ar(3000,amp * 0.1),\
			3000, 0.8),\
			pan\
		)\
	);\
\}).load(s);\
\
\cf2 //// sine pad\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_pad"\cf0 ,\{\
	\cf3 arg\cf0  note, pan, amp, bpm=108;\
	\cf3 var\cf0  env,scale,buffer,freq,outBus=0;\
	env = \cf3 Env\cf0 .perc(bpm/60 - 0.3, 2, 0.25, 3);\
	scale=\cf3 FloatArray\cf0 [0,2,3,5,7,8,10];\
	buffer = \cf3 Buffer\cf0 .alloc(s, scale.size,1, \{\cf3 |b|\cf0  b.setnMsg(0, scale) \});\
	freq = \cf3 DegreeToKey\cf0 .kr(\
				buffer.bufnum,\
				note,		\cf2 // input\cf0 \
				12,			\cf2 // 12 notes per octave\cf0 \
				1,			\cf2 // mul = 1\cf0 \
				61			\cf2 // offset by 53 notes\cf0 \
			).midicps;\
	\cf3 Out\cf0 .ar(outBus,\
		\cf3 Pan2\cf0 .ar(\
			\cf3 EnvGen\cf0 .ar(env,doneAction: 2)\
			* \cf3 SinOsc\cf0 .ar(freq, 0, amp)\
			* \cf3 Lag\cf0 .ar(\cf3 LFPulse\cf0 .ar(bpm/15, 0, 0.5, 1),0.02)\
		,pan)\
	);\
\}).load(s);\
\
\cf2 //// drone\cf0 \
\cf3 SynthDef\cf0 (\cf4 "rr79_d"\cf0 ,\{\
	\cf3 arg\cf0  freq,outBus=0;\
	\cf3 Out\cf0 .ar([outBus,outBus+1],\
		\cf3 LPF\cf0 .ar(\
			\cf3 Saw\cf0 .ar([freq,freq-0.1]) * \cf3 LFNoise2\cf0 .ar(0.1,0.02,0.07),\
			\cf3 LFNoise2\cf0 .kr(0.1,300)+500\
		)\
	)\
\}).load(s);\
)\
\
\cf2 // Then do this\cf0 \
(\
\cf3 var\cf0  bpm,n;\
\cf3 var\cf0  melody,kick,snare,hihat,pad,drone;\
\
~source = \cf3 Group\cf0 .head(s);\
\
bpm=108;\
n=7;\
\
m=\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_m"\cf0 , [\cf5 \\amp\cf0 ,0]);\
drone=\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_d"\cf0 ,[\cf5 \\freq\cf0 ,25.midicps]);\
\
\cf2 // melody\cf0 \
melody=\cf3 Task\cf0 (\{\
	\cf3 var\cf0  degreepat,durpat,amppat;\
	degreepat = \cf3 Pseq\cf0 ([\
		\cf3 Pfunc\cf0 (\{\
			n = n + 3.rand2;\
			if (n < 6, \{ n = 7 \});\
			if (n > 16, \{ n = 15 \});\
			n;\
		\}) + \cf3 Pwrand\cf0 ([0,-7], [0.8, 0.2], \{exprand(4,40)\}),\
		\cf3 Pseq\cf0 ([0,5,6,5,3,7],1)\
	], \cf3 inf\cf0 ).asStream;\
	durpat = \cf3 Pseq\cf0 ([1.2,0.8], \cf3 inf\cf0 ).asStream;\
	amppat = \cf3 Pseq\cf0 ([\
		\cf3 Pseq\cf0 ([\
			\cf3 Pseq\cf0 ([1,0,0,0.8], 2),\
			\cf3 Pseq\cf0 ([1,0,0.7,0], 2),\
			\cf3 Pseq\cf0 ([0.9,0.9,0.9,0.9], 3),\
			\cf3 Pseq\cf0 ([1,0,0.5,0.7], 1)\
		],8),\
		\cf3 Pseq\cf0 ([\
			\cf3 Pseq\cf0 ([1.5,0,0,0], 1),\
			\cf3 Pseq\cf0 ([0,0,0,0], 13),\
			\cf3 Pseq\cf0 ([0,0,1,0.5], 1)\
		],1)\
	],\cf3 inf\cf0 ).asStream;\
	\
	loop(\{\
		m.set(\cf5 \\note\cf0 , degreepat.next);\
		m.set(\cf5 \\amp\cf0 , 0.2*amppat.next);\
		m.set(\cf5 \\pan\cf0 , 1.0.bilinrand);\
		(durpat.next).wait;\
	\});\
\},\cf3 TempoClock\cf0 (bpm/15));\
\
\cf2 // kick\cf0 \
kick=\cf3 Task\cf0 (\{\
	\cf3 var\cf0  durpat,amppat;\
	durpat = \cf3 Pseq\cf0 ([1.2,0.8], \cf3 inf\cf0 ).asStream;\
	amppat = \cf3 Pseq\cf0 ([\
		\cf3 Pseq\cf0 ([1,0,0.4,0.4, 0,0,0,0, 0], 1),\
		\cf3 Pwrand\cf0 ([0.3,0], [0.3,0.7], 3),\
		\cf3 Prand\cf0 ([\
			\cf3 Pwrand\cf0 ([0.8,0.5,0], [0.3,0.4,0.3], 4),\
			\cf3 Pwrand\cf0 ([0.6,0], [0.3,0.7], 4)\
		], 1)\
	], \cf3 inf\cf0 ).asStream;	\
	loop(\{\
		\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_kick"\cf0 , [\
			\cf5 \\amp\cf0 , amppat.next\
		]);\
		(durpat.next).wait;\
	\});\
\},\cf3 TempoClock\cf0 (bpm/15));\
\
\cf2 // snare\cf0 \
snare=\cf3 Task\cf0 (\{\
	\cf3 var\cf0  durpat,amppat;\
	durpat = \cf3 Pseq\cf0 ([1.2,0.8], \cf3 inf\cf0 ).asStream;\
	amppat = \cf3 Pseq\cf0 ([\
		\cf3 Pseq\cf0 ([0],1),\
		\cf3 Pwrand\cf0 ([\
			\cf3 Pwrand\cf0 ([0.6,0], [0.2, 0.8], 3),\
			\cf3 Pseq\cf0 ([0], 3)\
		], [0.8,0.2], 1),\
		\cf3 Pwrand\cf0 ([1,0], [0.92, 0.08], 1),\
		\cf3 Pwrand\cf0 ([\
			\cf3 Pwrand\cf0 ([0.6,0.2,0], [0.4, 0.4, 0.2], 3),\
			\cf3 Pwrand\cf0 ([0.6,0], [0.2, 0.8], 3),\
			\cf3 Pseq\cf0 ([0], 3)\
		], [0.2,0.7,0.1], 1)\
	], \cf3 inf\cf0 ).asStream;	\
	loop(\{\
		\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_snare"\cf0 , [\
			\cf5 \\amp\cf0 , amppat.next\
		]);\
		(durpat.next).wait;\
	\});\
\},\cf3 TempoClock\cf0 (bpm/15));\
\
\cf2 // hihat\cf0 \
hihat=\cf3 Task\cf0 (\{\
	\cf3 var\cf0  durpat,amppat,panpat;\
	durpat = \cf3 Pseq\cf0 ([1.2,0.8], \cf3 inf\cf0 ).asStream;\
	amppat = \cf3 Pseq\cf0 ([\
		\cf3 Pseq\cf0 ([0,0,1,0], 2),\
		\cf3 Pseq\cf0 ([0,0,1,0.8],1),\
		\cf3 Pseq\cf0 ([0,0,1,0], 5)\
	], \cf3 inf\cf0 ).asStream;\
	panpat = \cf3 Pseq\cf0 ([\cf3 Pseq\cf0 ([0.8],4), \cf3 Pseq\cf0 ([-0.8],4)],\cf3 inf\cf0 ).asStream;\
	loop(\{\
		\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_hh"\cf0 , [\
			\cf5 \\amp\cf0 , amppat.next,\
			\cf5 \\pan\cf0 , panpat.next\
		]);\
		(durpat.next).wait;\
	\});\
\},\cf3 TempoClock\cf0 (bpm/15));\
\
\cf2 // sine pad\cf0 \
pad=\cf3 Task\cf0 (\{\
	\cf3 var\cf0  i=3;\
	loop(\{\
		i.postln;\
		16.do(\{\
			i.do(\{\
				\cf3 Synth\cf0 .tail(~source, \cf4 "rr79_pad"\cf0 , [\
					\cf5 \\note\cf0 , 13.rand2 + 5,\
					\cf5 \\amp\cf0 , 0.15,\
					\cf5 \\pan\cf0 , 1.0.rand2\
				]);\
			\});\
			1.wait;\
		\});\
		i=i+3;\
	\});\
\},\cf3 TempoClock\cf0 (bpm/240));\
\
\cf3 SystemClock\cf0 .sched((10*240)/bpm,\{melody.start\});\
\cf3 SystemClock\cf0 .sched(0,\{kick.start\});\
\cf3 SystemClock\cf0 .sched((4*240)/bpm,\{snare.start\});\
\cf3 SystemClock\cf0 .sched(0,\{hihat.start\});\
\cf3 SystemClock\cf0 .sched((4*240)/bpm,\{pad.start\});\
)\
\
\cf2 // licensed under a Creative Commons Attribution\cf0 \
\cf2 // http://creativecommons.org/licenses/by-nc/2.1/jp/}