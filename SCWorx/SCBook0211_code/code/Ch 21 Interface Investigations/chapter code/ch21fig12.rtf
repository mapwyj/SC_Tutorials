{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 \
\
\cf2 // Figure 12. A sketch of snow triggering a bell sound on landing\cf0 \
(\
\cf3 SynthDef\cf0 (\cf4 \\snowBell\cf0 , \{ \cf3 | freq=440, amp=0.4, pan=0 |\cf0 \
	\cf3 var\cf0  x, env;\
	env = \cf3 EnvGen\cf0 .kr(\cf3 Env\cf0 .perc(0.001, \cf3 Rand\cf0 (550,650)/freq, amp), doneAction:2);\
	x = \cf3 Mix\cf0 .fill(6, \{\cf3 SinOsc\cf0 .ar(freq*\cf3 Rand\cf0 (-10,10), 0, \cf3 Rand\cf0 (0.1,0.2))\});\
	x = \cf3 Pan2\cf0 .ar(x, pan, env);\
	\cf3 Out\cf0 .ar(0, x);\
\}).add;\
)\
\
(\
\cf3 var\cf0  win, msl, trigAction, snowloc, speeds, speed, layers=4, snowcount = 62;\
\
\cf2 // fill an array with arrays (number of layers) of locations\cf0 \
snowloc = \{\{rrand(0.38,1.5)\} ! snowcount\} ! layers;\
\cf2 // fill an array with arrays (number of layers) of step size (speed)\cf0 \
speeds = \{\{rrand(0.01,0.018)\} ! snowcount\} ! layers;\
\
speed = 0.1;\
\
win = \cf3 Window\cf0 (\cf5 "snow"\cf0 , \cf3 Rect\cf0 (11, 311, 520, 240), border: \cf3 false\cf0 ).front;\
\pard\pardeftab560\ql\qnatural
\cf0 win.view.background = \cf3 Color\cf0 (0.14,0.17,0.24);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
msl = \cf3 Array\cf0 .fill(layers, \{\cf3 |i|\cf0 \
		\cf3 MultiSliderView\cf0 (win, \cf3 Rect\cf0 (-1, -1, 522, 242))\
			.strokeColor_( \cf3 Color\cf0 .new255(rrand(22,35),rrand(22,35),rrand(22,35)) )\
			.fillColor_( \cf3 Color\cf0 .new255(rrand(222,255),rrand(222,255),rrand(222,255)) )\
			.valueThumbSize_(rrand(2.8,3.8))\
			.indexThumbSize_(rrand(2.8,3.8))\
			.gap_(5)\
	\});\
\
\cf2 // when the snow falls this happens. (pitch is mapped to index and amplitude to speed)\cf0 \
trigAction = \{\cf3 arg\cf0  drop, amp; \cf3 Synth\cf0 (\cf4 \\snowBell\cf0 , [\cf4 \\freq\cf0 , 400+(drop*20), \cf4 \\amp\cf0 , amp, \cf4 \\pan\cf0 , rrand(-0.8, 0.8)])\};\
\
t = \cf3 Task\cf0 (\{\
	loop(\{\
		snowloc = snowloc.collect(\{\cf3 |array, i|\cf0  \
			array = array.collect(\{\cf3 |val, j|\cf0  \
				val = val-speeds[i][j]; \
				if(val< 0.0, \{val = 1.0; trigAction.(j, speeds[i][j]*10 )\});\
				val\
			\});\
			array\
		\});\
		\cf2 /* \
		Task uses the TempoClock by default so we need to "defer" the GUI updating \
		(Function:defer uses AppClock) This means that the Task is essentially using \
		the SystemClock and therefore the timing is better on the sound front. \
		The AppClock (used for GUI updates) has worse timing.\
		*/\cf0 \
		\{ layers.do(\{\cf3 |i|\cf0  msl[i].value_(snowloc[i]) \}) \}.defer;\
		speed.wait;\
	\});\
\}).start;\
\
\cf2 // on stopping the program (Command/Ctrl + dot) the task will stop and the window close\cf0 \
\cf3 CmdPeriod\cf0 .add(\{ t.stop; win.close; \});\
)\
}